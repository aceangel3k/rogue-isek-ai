import { useState, useEffect } from 'react';

export default function LoadingScreen({ status = null }) {
  const [currentStep, setCurrentStep] = useState(0);
  const [progress, setProgress] = useState(0);

  // Default loading steps if no status provided
  const defaultSteps = [
    { label: 'Generating story and theme', duration: 2000 },
    { label: 'Creating dungeon layout', duration: 1500 },
    { label: 'Generating wall textures', duration: 3000 },
    { label: 'Generating floor and ceiling', duration: 2000 },
    { label: 'Creating enemy sprites', duration: 4000 },
    { label: 'Generating NPC sprites', duration: 2000 },
    { label: 'Creating HUD and weapon', duration: 2000 },
    { label: 'Finalizing game data', duration: 1000 }
  ];

  useEffect(() => {
    if (status) return; // If real status is provided, don't simulate

    // Simulate progress through steps
    let stepIndex = 0;
    let progressValue = 0;

    const interval = setInterval(() => {
      progressValue += 1;
      setProgress(progressValue);

      // Calculate which step we're on based on progress
      const totalDuration = defaultSteps.reduce((sum, step) => sum + step.duration, 0);
      let accumulatedDuration = 0;
      
      for (let i = 0; i < defaultSteps.length; i++) {
        accumulatedDuration += defaultSteps[i].duration;
        if ((progressValue / 100) * totalDuration < accumulatedDuration) {
          setCurrentStep(i);
          break;
        }
      }

      if (progressValue >= 100) {
        clearInterval(interval);
      }
    }, 180); // Update every 180ms for smooth animation

    return () => clearInterval(interval);
  }, [status]);

  const displayStatus = status || defaultSteps[currentStep]?.label || 'Loading...';
  const displayProgress = status ? (status.progress || 0) : progress;

  return (
    <div className="min-h-screen flex flex-col items-center justify-center p-4" style={{ background: '#000' }}>
      <div className="max-w-2xl w-full text-center">
        <h1 className="text-4xl font-bold mb-8 retro-glow animate-pulse" style={{ color: '#00ff00' }}>
          &gt; GENERATING DUNGEON DATA...
        </h1>
        
        <div className="mb-8">
          <div className="w-24 h-24 border-4 animate-spin mx-auto" style={{ borderColor: '#00ff00', borderTopColor: 'transparent', borderRadius: '50%' }}></div>
        </div>

        {/* Progress Bar */}
        <div className="mb-6">
          <div className="retro-progress">
            <div 
              className="retro-progress-fill"
              style={{ width: `${displayProgress}%` }}
            ></div>
          </div>
          <p className="text-sm mt-2 retro-glow" style={{ color: '#00ff00' }}>
            [{Math.round(displayProgress)}% COMPLETE]
          </p>
        </div>

        {/* Current Status */}
        <div className="retro-panel mb-6">
          <div className="flex items-center justify-center">
            <div className="w-3 h-3 rounded-full mr-3 animate-pulse" style={{ background: '#00ff00', boxShadow: '0 0 10px #00ff00' }}></div>
            <p className="text-lg font-semibold retro-glow" style={{ color: '#00ff00' }}>
              &gt; {displayStatus.toUpperCase()}
            </p>
          </div>
        </div>
        
        {/* Step List */}
        <div className="retro-panel text-left">
          <h2 className="text-xl font-bold mb-4 retro-glow" style={{ color: '#00ff00' }}>
            &gt; GENERATION_STEPS:
          </h2>
          <ul className="space-y-3">
            {defaultSteps.map((step, index) => (
              <li 
                key={index}
                className={`flex items-center transition-all duration-300 ${
                  index < currentStep ? 'opacity-50' : 
                  index === currentStep ? 'opacity-100 scale-105' : 
                  'opacity-30'
                }`}
                style={{ color: '#00ff00' }}
              >
                {index < currentStep ? (
                  <span className="mr-3" style={{ color: '#00ff00' }}>[âœ“]</span>
                ) : index === currentStep ? (
                  <span className="mr-3 animate-pulse" style={{ color: '#00ff00' }}>[&gt;]</span>
                ) : (
                  <span className="mr-3" style={{ color: '#00ff00' }}>[ ]</span>
                )}
                <span className={index === currentStep ? 'font-semibold' : ''}>
                  {step.label.toUpperCase()}
                </span>
              </li>
            ))}
          </ul>
        </div>

        {/* Fun Tip */}
        <div className="mt-6 text-sm retro-glow" style={{ color: '#00ff00' }}>
          <p>&gt; TIP: EACH DUNGEON IS PROCEDURALLY GENERATED BY AI</p>
        </div>
      </div>
    </div>
  );
}